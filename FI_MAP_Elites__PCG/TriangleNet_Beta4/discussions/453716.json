[
  {
    "Id": "1081808",
    "ThreadId": "453716",
    "Html": "Hello,\r<br />\n<br />\nThanks for this great library in advance=).I am using constrained delaunay triangulation it was working fine but then  i got in an endless loop what could be causing this.  My point list is as follows.  I m using sweepline algorithm. I would be really thankful if you could point me in any direction. <br />\n<pre><code>                TriangleNet.Geometry.InputGeometry inGeo = new                 TriangleNet.Geometry.InputGeometry(segmentList.Count);\n                foreach (var pt in segmentList)\n                {\n                    inGeo.AddPoint(pt.X, pt.Y);\n\n                }\n                for (int i = 0; i &lt; segmentList.Count - 1; i++)\n                {\n                    inGeo.AddSegment(i, i + 1);\n                }\n                Mesh triangleMesh = new Mesh();\n                triangleMesh.Behavior.Algorithm = TriangleNet.TriangulationAlgorithm.SweepLine;\n                triangleMesh.Triangulate(inGeo);</code></pre>\n\n5.16191620588875,4.74489599815306\r<br />\n5.02102521525629,4.7344726196005\r<br />\n5.01208348248456,4.73367336421044\r<br />\n5,4.73257998285177\r<br />\n4.91511208481942,4.7247949658969\r<br />\n4.83282671300839,4.71719148685957\r<br />\n3,4.5558631889464\r<br />\n2.38706774421006,4.49645401183218\r<br />\n2.00901042740101,4.45486547638022\r<br />\n2.005525567705,4.45437543318585\r<br />\n1.18276729996591,4.32774737104215\r<br />\n1,4.27602480527384\r<br />\n0.572810271987014,4.15458918350014\r<br />\n0.0223566278276216,3.72870064690785\r<br />\n0.00962317637117527,3.71904827417058\r<br />\n0.0535143418010542,3.49259703477457\r<br />\n0.0731335379387111,3.46265489173499\r<br />\n0.307072549393047,3.24018401420075\r<br />\n0.524359236291813,3.12902451614457\r<br />\n0.785748191135991,3.04691649562599\r<br />\n1,2.95455470230018\r<br />\n1.35213334242182,2.79475195781052\r<br />\n1.44320264839598,2.76686090428988\r<br />\n1.5367342674238,2.73823575361126\r<br />\n1.54857243633759,2.73453268321805\r<br />\n1.90356622710304,2.62203696909176\r<br />\n1.92408675536428,2.61565745248041\r<br />\n1.94731470020927,2.608396431284\r<br />\n1.9738036384356,2.60007345601322\r<br />\n2.0921529459617,2.56250665748498\r<br />\n2.31786695783887,2.4898925729526\r<br />\n2.12809991836548,2.42245456624611\r<br />\n2.07594967457437,2.40226646667309\r<br />\n1.97452263347559,2.36256936070282\r<br />\n1.94985612088841,2.35254320727545\r<br />\n1.92693574663062,2.34297225638066\r<br />\n1.84524499400463,2.30651255757652\r<br />\n1.82917381266489,2.29999995231628\r<br />\n1.85846105146484,2.29004195829387\r<br />\n1.95967176140747,2.25386783628871\r<br />\n1.97211524016405,2.24965050758107\r<br />\n2.06880869091307,2.21848146077418\r<br />\n2.12809991836548,2.19975426739998\r<br />\n2.36001777950467,2.13431571653108\r<br />\n2.47965980430804,2.10009826322647\r<br />\n2.64446592665339,2.06217625079342\r<br />\n3,1.96918249943337\r<br />\n3.18270304789255,1.92677275382958\r<br />\n3.30100235294152,1.89995419323119\r<br />\n3.43001138591633,1.87132727607597\r<br />\n3.49196211032703,1.85575925178247\r<br />\n3.58832776626803,1.83292157280458\r<br />\n3.66591654438806,1.81625173027053\r<br />\n3.77124722918886,1.79197076653699\r<br />\n3.81101114954226,1.78337768390281\r<br />\n4,1.74239875606186\r<br />\n4.04485256912545,1.73296265931081\r<br />\n4.07849840109768,1.72601496831249\r<br />\n4.10481493858468,1.72069696779535\r<br />\n4.25425032706732,1.68805801331962\r<br />\n4.38946243228564,1.66126282575119\r<br />\n4.43941282757263,1.65115763307712\r<br />\n4.50500011444092,1.63825346114909\r<br />\n4.61961588029388,1.61671656237602\r<br />\n4.79496364267811,1.58357735822284\r<br />\n4.82977260253185,1.57730076423476\r<br />\n4.85119470474919,1.57351429009449\r<br />\n4.95039319652335,1.55651154761861\r<br />\n5.22897898773263,1.50792039278996\r<br />\n5.54426195820521,1.45661024784611\r<br />\n5.54449130633988,1.45656550189442\r<br />\n5.5445870883462,1.45654889443384\r<br />\n5.5455651789085,1.456399289963\r<br />\n5.74036280912079,1.39728811468832\r<br />\n5.82412715848293,1.37221636582089\r<br />\n5.99595274284814,1.32060435044261\r<br />\n5.99970720981729,1.31948109764926\r<br />\n6.13030385271466,1.28063107422709\r<br />\n6.22817480231502,1.25195447634087\r<br />\n6.49940579342618,1.17248114480904\r<br />\n6.67104537396659,1.12298965144303\r<br />\n6.89365213325384,1.06063919989822\r<br />\n7,1.03064503596977\r<br />\n7.03448220352383,1.02104453954598\r<br />\n7.10803375524482,1.0006867845484\r<br />\n7.37640235388167,0.927469289235045\r<br />\n7.45776558144505,0.905166793849379\r<br />\n7.49915119463394,0.893997969471656\r<br />\n7.61344463623006,0.863552884638561\r<br />\n7.99882662361535,0.760409856715376\r<br />\n8.45087120570413,0.64337691908263\r<br />\n8.49909862053278,0.630930960112564\r<br />\n8.80274365185545,0.555563033021054\r<br />\n9,0.506584219508381\r<br />\n9.01326938324268,0.503501997002188\r<br />\n9.99831512735193,0.275672459158149\r<br />\n10.4351130943139,0.189095982471183\r<br />\n11,0.0774544523980982\r<br />\n11.1428584410998,0.0590563248576219\r<br />\n11.615203781935,0\r<br />\n13.5294060407946,8.18586399882184E-18\r<br />\n15.2619225930376,1.05136198238356E-17\r<br />\n16.8759697896876,8.35343200139012E-18\r<br />\n17.5944597818197,6.68388212818752E-18\r<br />\n18.3832816464454,4.64501179918399E-18\r<br />\n19.4764263021268,1.49411669870019E-18\r<br />\n19.6832893000986,8.95758417628319E-19\r<br />\n19.992968764043,0\r<br />\n24.1263861707568,0.258338587919609\r<br />\n26.6056104202759,0.413290103514557\r<br />\n31.5021426717729,0.71932336923312\r<br />\n35,0.937939452247311\r<br />\n39.7649333341491,1.23574778563163\r<br />\n39.9575996398926,1.2477894297406\r<br />\n40.5643970629932,1.28571426868439\r<br />\n44.9151992797852,1.55763940723388\r<br />\n48.9634477931586,1.81065493931972\r<br />\n49.8727989196777,1.86748938472717\r<br />\n50.8501121661426,1.92857146263123\r<br />\n54.8303985595703,2.17733936222046\r<br />\n56.8811206179688,2.30550949087036\r<br />\n59.5930034039047,2.47500216499135\r<br />\n60.6993847961155,2.54415100200453\r<br />\n61,2.57355013009898\r<br />\n61.1170564651006,2.58504807429274\r<br />\n61.1745424854587,2.59053663839076\r<br />\n61.4017777090743,2.63466192327439\r<br />\n61.5632934569836,2.66449823512874\r<br />\n61.6582148327555,2.69884866061036\r<br />\n61.8532401532336,2.76564637503401\r<br />\n61.8912075666194,2.79349742681974\r<br />\n62,2.87529583475716\r<br />\n62.0240810474994,2.89381917379723\r<br />\n62.0503252079414,3.02574229469662\r<br />\n62.0400407422615,3.08897277183506\r<br />\n62,3.15938409986912\r<br />\n61.9485812676005,3.24722578147234\r<br />\n61.6746006847975,3.43496538376621\r<br />\n61.1291459587776,3.78519955176204\r<br />\n61.0365591998728,3.82769729804388\r<br />\n61,3.8435533084047\r<br />\n60.9218755422187,3.87577541689226\r<br />\n60.3009634080862,4.13084894675526\r<br />\n60,4.24510978791411\r<br />\n59.6870408564576,4.35587950577591\r<br />\n59.5863394121064,4.38883661381312\r<br />\n59.5107291089522,4.41213170889827\r<br />\n59.1161003112792,4.53449448337781\r<br />\n58.8721516900682,4.60941452644205\r<br />\n58.639082778477,4.66995535987981\r<br />\n58.3460037292212,4.75519191697964\r<br />\n58.1613395248457,4.79819050398629\r<br />\n57.9196636279115,4.86402023748339\r<br />\n57.6825401389039,4.91202385325552\r<br />\n57.4876413474398,4.96026545411106\r<br />\n57.2025534966786,5.00851913273065\r<br />\n56.4755662956055,5.09831374061988\r<br />\n56.2392627796784,5.14277605624945\r<br />\n55.9359190074425,5.17482139499887\r<br />\n55.2728004455566,5.19844478184449\r<br />\n55.1153979909374,5.19999980926514\r<br />\n53.8171111345069,5.19999980926514\r<br />\n53.149558456284,5.19999980926514\r<br />\n51.559445836088,5.19999980926514\r<br />\n48.1929657122852,5.19999980926514\r<br />\n47.0145907999899,5.19999980926514\r<br />\n46.6789283752441,5.19999980926514\r<br />\n42.4697378171834,5.19999980926514\r<br />\n40.8394660949707,5.19999980926514\r<br />\n39.6181955139549,5.20000000871734\r<br />\n35,5.20000043953888\r<br />\n32.9345439644304,5.2000004635605\r<br />\n30.7054067206098,5.20000048948576\r<br />\n28.9789485931396,5.20000088962676\r<br />\n26.6840118491408,5.20000123977661\r<br />\n25.3035188631837,5.20000123977661\r<br />\n22.9578990936279,5.20000123977661\r<br />\n21.5627774207489,5.20037842469721\r<br />\n21.2663936485012,5.2004783424723\r<br />\n20.6974081182889,5.20028830260857\r<br />\n19.5750999450684,5.20003964067943\r<br />\n19.4997801015388,5.19995218447733\r<br />\n18.6702870435184,5.19914359350166\r<br />\n18.6000003814697,5.19908224559873\r<br />\n18.2488027380631,5.19806277600826\r<br />\n18.0199866224518,5.19738990542209\r<br />\n17.7999330359678,5.19644022005243\r<br />\n17.580714608161,5.19501718714565\r<br />\n17.3695310951802,5.19389997497131\r<br />\n17,5.19196750050261\r<br />\n15.9483915750899,5.18132190078849\r<br />\n15,5.17092094712703\r<br />\n14.5325383139421,5.16349071534255\r<br />\n14.3544976867168,5.1600560249118\r<br />\n13.7770241129465,5.14966973834032\r<br />\n13.3284311102577,5.13877201556674\r<br />\n13,5.13221865051803\r<br />\n12.881714930687,5.12855388457531\r<br />\n11,5.07478822967406\r<br />\n10.7188300835244,5.06252454653892\r<br />\n9.37534315087567,5.00776919474409\r<br />\n9.18885648575051,5.00073094519747\r<br />\n9,4.99295068434131\r<br />\n8.61691229431714,4.97507980349042\r<br />\n7.70899003646492,4.92227704536304\r<br />\n7,4.87866400061863\r<br />\n6.88062632838523,4.87166621878271\r<br />\n6.76122584488123,4.86428022808233\r<br />\n5.16191620588875,4.74489599815306<br />\n",
    "PostedDate": "2013-08-18T04:18:54.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1081839",
    "ThreadId": "453716",
    "Html": "I can't reproduce an endless loop. But you have duplicate points in your input (first and last). To close the polygon just do something like<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">int</span> n = points.Length;\n\n<span style=\"color:Blue;\">var</span> geometry = <span style=\"color:Blue;\">new</span> InputGeometry(n);\n\n<span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; n; i++)\n{\n    geometry.AddPoint(points[i].X, points[i].Y);\n}\n\n<span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; n; i++)\n{\n    geometry.AddSegment(i, (i + 1) % n);\n}\r\n</pre></div>Though duplicate points should be handled just fine by the sweepline algorithm. Could you post a complete, working example which leads to the endless loop?<br />\n",
    "PostedDate": "2013-08-18T08:10:17.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1081866",
    "ThreadId": "453716",
    "Html": "Thanks for the quick response=) You are right about the endless loop casting to float solved that problem. <br />\n<pre><code>for (int i = 0; i &lt; n; i++)\n{\n    geometry.AddPoint((float)points[i].X, (float)points[i].Y);\n}</code></pre>\n\nBut i am still getting some other exception &quot;unable to find a triangle on path&quot;.How can i get over this? I uploaded an example project as you requested with three different polygon cases=). Thanks again for your help.\r<br />\n<br />\n<a href=\"http://rapidshare.com/files/2302257648/EndlessLoopExample.rar\" rel=\"nofollow\">ExampleProject</a><br />\n",
    "PostedDate": "2013-08-18T11:34:39.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1081887",
    "ThreadId": "453716",
    "Html": "I think you are reading your data the wrong way and hence producing some garbage input. Your intention is probably to read floating point values, but if you are trying to parse a number like &quot;6.8275188916581&quot;, <code>Convert.ToSingle(string)</code> might not give you what you expect, depending on your system culture (the problem is, that the decimal seperator isn't recognized, and thus you are reading some really large integers). Try reading your data with the following code (and notice the use of the <code>NumberFormatInfo</code>):<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">static</span> InputGeometry LoadTextFile(<span style=\"color:Blue;\">string</span> filename)\n{\n    <span style=\"color:Blue;\">var</span> points = <span style=\"color:Blue;\">new</span> List&lt;TriangleNet.Geometry.Point&gt;();\n\n    <span style=\"color:Blue;\">using</span> (<span style=\"color:Blue;\">var</span> reader = <span style=\"color:Blue;\">new</span> StreamReader(filename))\n    {\n        <span style=\"color:Blue;\">string</span>[] line;\n        <span style=\"color:Blue;\">double</span> x, y;\n\n        <span style=\"color:Green;\">// This is important!</span>\n        <span style=\"color:Blue;\">var</span> format = CultureInfo.InvariantCulture.NumberFormat;\n\n        <span style=\"color:Blue;\">while</span> (!reader.EndOfStream)\n        {\n            line = reader.ReadLine().Split(<span style=\"color:#A31515;\">&#39;,&#39;</span>);\n\n            <span style=\"color:Blue;\">if</span> (line.Length &gt;= 2)\n            {\n                x = <span style=\"color:Blue;\">double</span>.Parse(line[0], format);\n                y = <span style=\"color:Blue;\">double</span>.Parse(line[1], format);\n                points.Add(<span style=\"color:Blue;\">new</span> TriangleNet.Geometry.Point(x, y));\n            }\n        }\n    }\n\n    <span style=\"color:Blue;\">int</span> n = points.Count;\n\n    <span style=\"color:Blue;\">if</span> (points[0] == points[n - 1])\n    {\n        <span style=\"color:Green;\">// Remove duplicate point</span>\n        points.RemoveAt(n - 1);\n        n--;\n    }\n\n    <span style=\"color:Blue;\">var</span> geometry = <span style=\"color:Blue;\">new</span> InputGeometry(n);\n\n    <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; n; i++)\n    {\n        geometry.AddPoint(points[i].X, points[i].Y);\n    }\n\n    <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; n; i++)\n    {\n        geometry.AddSegment(i, (i + 1) % n);\n    }\n\n    <span style=\"color:Blue;\">return</span> geometry;\n}\r\n</pre></div>",
    "PostedDate": "2013-08-18T13:37:33.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1082064",
    "ThreadId": "453716",
    "Html": "I changed the code as you suggested and added more samples this time. There are still plenty of &quot;unable to find triangle on path&quot; exceptions. What am i doing wrong? I checked polygons with rhinoceros they are all simple and closed. \r<br />\n<br />\n<a href=\"http://rapidshare.com/files/2773092909/EndlessLoopExample-001.rar\" rel=\"nofollow\">ExampleProject-001</a><br />\n",
    "PostedDate": "2013-08-19T02:52:53.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1082108",
    "ThreadId": "453716",
    "Html": "Thanks for providing more examples. I can reproduce the problems and will have a look on it as soon as possible. Using the default triangulation algorithm (divide and conquer), only the sample4.96 will fail (sweepline works for this one).<br />\n<br />\nI will open two work items (one for sweepline, one for d&amp;c), so you can track progress on the issue.<br />\n",
    "PostedDate": "2013-08-19T04:44:40.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1082111",
    "ThreadId": "453716",
    "Html": "This discussion has been copied to a work item. Click <a href=\"https://triangle.codeplex.com/workitem/10284\" rel=\"nofollow\">here</a> to go to the work item and continue the discussion.<br />\n",
    "PostedDate": "2013-08-19T04:46:51.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1082715",
    "ThreadId": "453716",
    "Html": "Please check out the latest code and use the default divide and conquer algorithm for triangulation. Sweepline will still fail on some of your polygons, but so does the original C code (for example sample4.36 will crash and sample4.37 displays an error message &quot;Internal error in finddirection():  Unable to find a triangle [...]&quot;).<br />\n<br />\nSo at the moment I have no plans to dig deeper.<br />\n",
    "PostedDate": "2013-08-20T08:01:44.873-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1082973",
    "ThreadId": "453716",
    "Html": "Thanks for checking it quickly I will try out the latest code. <br />\n",
    "PostedDate": "2013-08-20T23:33:12.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]