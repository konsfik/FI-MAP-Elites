[
  {
    "Id": "1454170",
    "ThreadId": "648235",
    "Html": "I found your library to be the best .Net solution for my current project.  I made few changes and figured I should submit back what I did.\r<br />\n<br />\nI changed the points to allow a z (not used for triangulation) so I could calculate an interpolated z for any point on a triangle.\r<br />\n<br />\nI also found QuadTree crashed when I tried to use it.  It looks like it was trying to reference triangles by their index in a list, but that was broken somewhere.  I changed it to directly reference the triangle objects and fixed the crash, but found the quad tree was not always putting the triangles into the correct nodes.  I re-wrote most of the QuadTree code and have a seemingly working solution.\r<br />\n<br />\nI am submitting back the full solution that now includes a DanTest project that is a simple form that demonstrates the QuadTree, z interpolation, and the ContainsPoint method I added to the Triangle class.\r<br />\n<br />\nThanks to all who have worked on this project.\r<br />\n<br />\nHere are the changes:\r<br />\n<br />\nData\\Triangle.cs<br />\n<pre><code>- added ContainsPoint\n- added Vertices accessor to directly access the Vertex array\n- added BoundingBox that is only calculated when needed\n- added ComputeZ that takes a point within the triangle and calculates interpolated z value\n</code></pre>\n\nIO\\InputTriangle.cs<br />\n<pre><code>- added ContainsPoint required by ITriangle (throws exception)\n- added Bounds accessor required by ITriangle (throws exception)\n</code></pre>\n\nTools\\QuadTree.cs<br />\n<pre><code>- new constructor taking a list of triangles\n- removed IsPointInTriangle and used Triangle.ContainsPoint instead\n- changed to use original Triangle objects rather than list indexes\n- change Query to return first valid triangle encountered and return null if none are found rather than creating a new list and returning FirstOrDefault()\n- replaced the code that determined what region a triangle belonged to (wasn't always working)\n</code></pre>\n\nGeometry\\InputGeometry.cs<br />\n<ul>\n<li>\nadded another AddPoint overload that also takes in a z value<br />\n</li>\n</ul>\nGeometry\\Point.cs<br />\n<pre><code>- added z (not used for triangulation, only interpolation on the result triangles)\n</code></pre>\n\nGeometry\\ITriangle.cs<br />\n<pre><code>- added ContainsPoint\n- added Bounds BoundingBox accessor\n</code></pre>\n\nGeometry\\BoundingBox.cs<br />\n<pre><code>- added new constructor that takes a collection of triangles and determines min/max from their vertices\n- added Intersects method that checks if the bounding box intersects another bounding box\n- added EdgesIntersectTriangle that determines if any edge on the bounding box intersects any edge of the triangle</code></pre>\n\n",
    "PostedDate": "2015-12-01T13:01:35.497-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1455172",
    "ThreadId": "648235",
    "Html": "Thanks, Dan.\r<br />\n<br />\nI've added a conditional compilation symbol (<code>USE_Z</code>) in the latest commit, but I'm not sure if this will be enabled by default in the future. There's also a new <code>Interpolation</code> class in the <code>TriangleNet.Tools</code> namespace, which can be used to interpolate the z values.\r<br />\n<br />\nThe quadtree in beta 3 was indeed broken. I fixed it in changeset <a href=\"https://triangle.codeplex.com/SourceControl/changeset/74908\" rel=\"nofollow\">74908</a>. Still, your implementation seems to be about 3x faster (due to some checks before actually calculating line segment intersections). I'll update the code for the next release.<br />\n",
    "PostedDate": "2015-12-08T13:08:58.427-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]