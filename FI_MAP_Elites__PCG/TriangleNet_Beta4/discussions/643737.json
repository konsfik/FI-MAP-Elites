[
  {
    "Id": "1440649",
    "ThreadId": "643737",
    "Html": "First off, your port is beautiful and I want to thank you so much for it. I made a codeplex account because of this project.<br />\n<br />\nI am using the latest source code (77033) and am attempting to create voronoi diagrams within a concave (non-complex) polygon. I would like to be able to specify a point cloud and a bounding polygon, and generate a voronoi diagram bounded to my polygon. The problem I am having is I can't figure out a way to specify a bounding polygon without its vertices being included in the triangulation of the mesh, and therefore becoming a face in the resulting voronoi diagram. Or if I don't specify the bounding polygon the triangulation ends up crossing boundary lines.<br />\n<br />\nDoes anyone have any suggestions on what the best way to go about doing this would be? Is it possible to remove the boundary points and corresponding triangles from the triangulation before passing it to the voronoi diagram, and still have the voronoi diagram faces be bounded to the original boundary?<br />\n",
    "PostedDate": "2015-08-14T17:21:14.85-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1440668",
    "ThreadId": "643737",
    "Html": "So you have a point cloud and an <em>approximate</em> boundary polygon. You compute the Voronoi diagram, but don't want the faces generated by the boundary vertices to be included.<br />\n<br />\nWhy don't you just ignore them (or remove them in a post-process step)? Just give the vertices of the boundary polygon a common, unique boundary mark. Then loop over all Voronoi faces and identify the unwanted faces by looking at the boundary property of the face generator.<br />\n<br />\n<strong>EDIT:</strong> Just saw that the generator isn't exposed as a public member. You'll have to edit the <em>TriangleNet.Topology.DCEL.Face</em> class.<br />\n",
    "PostedDate": "2015-08-15T01:54:45.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1440691",
    "ThreadId": "643737",
    "Html": "So I'm not sure that will work because I need the voronoi diagram to extend all the way and fill my boundary. The use case for this is I am generating voronoi diagrams within voronoi cells, but I don't want the cell vertices to be necessarily included in the voronoi diagram. Further the cells will be slightly modified so they will be concave, which led me to the following workflow:<br />\n<br />\n1) Generate the point cloud inside my border polygon<br />\n2) Generate the delaunay triangulation on the point cloud only<br />\n3) cull the resulting mesh, removing all segments and corresponding triangles that intersect with my boundary edges (O(n^2)) I know I won't have to remove any vertices, but edges may have to be removed because of concavity.<br />\n4) pass the new mesh to a standard voronoi<br />\n5) cull the voronoi to the boundary edges, closing faces as necessary<br />\n<br />\nI am currently working on step 3 and it requires a bit of manipulation to the mesh class, would love guidance on how to remove an edge and corresponding triangles from the mesh. I don't need the whole mesh to necessarily be triangulated after each step either, as I believe it is guaranteed to be triangulated after the end of step 3. As long as it is in a &quot;stable&quot; state by step 4 I should be okay.<br />\n<br />\nPerhaps there is more merit in the idea that I generate the voronoi diagraam, take out the boundary faces, and then extend the remaining faces to fill out the polygon, but I am not really sure how I would go about doing that.<br />\n<br />\nUpdate: <br />\nSo I got step 3 to work by using the ToMesh in the converter class, removing triangles without having to much with the mesh source code.. However I am no longer certain this is the path to proceed. I am willing to generate a bounded voronoi diagram which includes the specified edge points, I just don't want any additional boundary points. I found this disscussion: <a href=\"https://triangle.codeplex.com/discussions/550397\" rel=\"nofollow\">https://triangle.codeplex.com/discussions/550397</a> but when I specify conforming delauanay = true and Segment Splitting = 1, my bounded voronoi is not actually bounded to the boundary..<br />\n<br />\nPicture: (EDIT: Not sure why it didn't link correctly)<br />\n<a href=\"http://imgur.com/KG5V1l4\" rel=\"nofollow\">SplittingSegments = 1</a> <br />\n<a href=\"http://imgur.com/OPPa4Ut\" rel=\"nofollow\">SplittingSegments = 0</a><br />\n<br />\n<br />\n<br />\nCode:<br />\n<pre><code>var poly = new Polygon();\n// add the bounds\npoly.AddContour(bounds.Select(x =&gt; new Vertex(x.x, x.y)), 2, false, true);\n\n// add point cloud\nforeach (var p in points) { poly.Add(p); }\n\n// Triangulate the mesh\nvar constraints = new ConstraintOptions() { ConformingDelaunay = true, SegmentSplitting = 1};\nmesh = (TriangleNet.Mesh)poly.Triangulate(constraints, new QualityOptions(), new SweepLine());\nvoronoi = new TriangleNet.Voronoi.BoundedVoronoi(mesh);\n\nVoronoiVertices = voronoi.Vertices.Select(x =&gt; new Vector2f(x.X, x.Y)).ToList();\nVoronoiEdges = voronoi.Edges.Select(x =&gt; new LineSegment(VoronoiVertices[x.P0], VoronoiVertices[x.P1])).ToList();\n</code></pre>\n\n",
    "PostedDate": "2015-08-15T08:04:55.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1440928",
    "ThreadId": "643737",
    "Html": "Well, specifying both options doesn't make too much sense. If you specify <code>ConformingDelaunay = true</code>, additional vertices will most likely be inserted to make the mesh truly Delaunay and from what you describe, I guess the <code>SegmentSplitting</code> option is ignored.<br />\n<br />\nComputing the Voronoi diagram from a triangulation requires the triangulation to be Delaunay. Otherwise you'll run into problems like non-simple Voronoi cells.<br />\n<br />\n<strong>EDIT:</strong> looking at the image, obviously the ConformingDelaunay option gets ignored. Since the triangulation is not truly Delaunay, the Voronoi diagram cannot be computed correctly.<br />\n<br />\nOne option might be to compute the Voronoi diagram directly using Fortune's algorithm (though I don't know any implementation to compute bounded Voronoi diagrams for polygons).<br />\n",
    "PostedDate": "2015-08-18T03:22:18.43-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]